'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("ExamRecordDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ExamRecordDataSet
    Inherits System.Data.DataSet
    
    Private tableExamRecord As ExamRecordDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ExamRecord")) Is Nothing) Then
                MyBase.Tables.Add(New ExamRecordDataTable(ds.Tables("ExamRecord")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ExamRecord() As ExamRecordDataTable
        Get
            Return Me.tableExamRecord
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As ExamRecordDataSet = CType(MyBase.Clone,ExamRecordDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ExamRecord")) Is Nothing) Then
                MyBase.Tables.Add(New ExamRecordDataTable(ds.Tables("ExamRecord")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableExamRecord = CType(MyBase.Tables("ExamRecord"),ExamRecordDataTable)
        If (initTable = true) Then
            If (Not (Me.tableExamRecord) Is Nothing) Then
                Me.tableExamRecord.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ExamRecordDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ExamRecordDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableExamRecord = New ExamRecordDataTable
        MyBase.Tables.Add(Me.tableExamRecord)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeExamRecord() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ExamRecordDataSet = New ExamRecordDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub ExamRecordRowChangeEventHandler(ByVal sender As Object, ByVal e As ExamRecordRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ExamRecordDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRollNo As System.Data.DataColumn
        
        Private columnStudentId As System.Data.DataColumn
        
        Private columnStudenName As System.Data.DataColumn
        
        Private columnSectionsAttended As System.Data.DataColumn
        
        Private columnQuestionsAttended As System.Data.DataColumn
        
        Private columnCorrectAnswer As System.Data.DataColumn
        
        Private columnWrongAnswers As System.Data.DataColumn
        
        Private columnHitRate As System.Data.DataColumn
        
        Private columnTotalMarks As System.Data.DataColumn
        
        Private columnStartingTime As System.Data.DataColumn
        
        Private columnEndingTime As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ExamRecord"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RollNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnRollNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIdColumn() As System.Data.DataColumn
            Get
                Return Me.columnStudentId
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudenNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnStudenName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionsAttendedColumn() As System.Data.DataColumn
            Get
                Return Me.columnSectionsAttended
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuestionsAttendedColumn() As System.Data.DataColumn
            Get
                Return Me.columnQuestionsAttended
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CorrectAnswerColumn() As System.Data.DataColumn
            Get
                Return Me.columnCorrectAnswer
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WrongAnswersColumn() As System.Data.DataColumn
            Get
                Return Me.columnWrongAnswers
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HitRateColumn() As System.Data.DataColumn
            Get
                Return Me.columnHitRate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalMarksColumn() As System.Data.DataColumn
            Get
                Return Me.columnTotalMarks
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartingTimeColumn() As System.Data.DataColumn
            Get
                Return Me.columnStartingTime
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndingTimeColumn() As System.Data.DataColumn
            Get
                Return Me.columnEndingTime
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ExamRecordRow
            Get
                Return CType(Me.Rows(index),ExamRecordRow)
            End Get
        End Property
        
        Public Event ExamRecordRowChanging As ExamRecordRowChangeEventHandler
        
        Public Event ExamRecordRowChanged As ExamRecordRowChangeEventHandler
        
        Public Event ExamRecordRowDeleting As ExamRecordRowChangeEventHandler
        
        Public Event ExamRecordRowDeleted As ExamRecordRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddExamRecordRow(ByVal row As ExamRecordRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddExamRecordRow(ByVal RollNo As Integer, ByVal StudentId As String, ByVal StudenName As String, ByVal SectionsAttended As Integer, ByVal QuestionsAttended As Integer, ByVal CorrectAnswer As Integer, ByVal WrongAnswers As Integer, ByVal HitRate As Integer, ByVal TotalMarks As Integer, ByVal StartingTime As Date, ByVal EndingTime As Date) As ExamRecordRow
            Dim rowExamRecordRow As ExamRecordRow = CType(Me.NewRow,ExamRecordRow)
            rowExamRecordRow.ItemArray = New Object() {RollNo, StudentId, StudenName, SectionsAttended, QuestionsAttended, CorrectAnswer, WrongAnswers, HitRate, TotalMarks, StartingTime, EndingTime}
            Me.Rows.Add(rowExamRecordRow)
            Return rowExamRecordRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ExamRecordDataTable = CType(MyBase.Clone,ExamRecordDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ExamRecordDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRollNo = MyBase.Columns("RollNo")
            Me.columnStudentId = MyBase.Columns("StudentId")
            Me.columnStudenName = MyBase.Columns("StudenName")
            Me.columnSectionsAttended = MyBase.Columns("SectionsAttended")
            Me.columnQuestionsAttended = MyBase.Columns("QuestionsAttended")
            Me.columnCorrectAnswer = MyBase.Columns("CorrectAnswer")
            Me.columnWrongAnswers = MyBase.Columns("WrongAnswers")
            Me.columnHitRate = MyBase.Columns("HitRate")
            Me.columnTotalMarks = MyBase.Columns("TotalMarks")
            Me.columnStartingTime = MyBase.Columns("StartingTime")
            Me.columnEndingTime = MyBase.Columns("EndingTime")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRollNo = New System.Data.DataColumn("RollNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRollNo)
            Me.columnStudentId = New System.Data.DataColumn("StudentId", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentId)
            Me.columnStudenName = New System.Data.DataColumn("StudenName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudenName)
            Me.columnSectionsAttended = New System.Data.DataColumn("SectionsAttended", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSectionsAttended)
            Me.columnQuestionsAttended = New System.Data.DataColumn("QuestionsAttended", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuestionsAttended)
            Me.columnCorrectAnswer = New System.Data.DataColumn("CorrectAnswer", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCorrectAnswer)
            Me.columnWrongAnswers = New System.Data.DataColumn("WrongAnswers", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWrongAnswers)
            Me.columnHitRate = New System.Data.DataColumn("HitRate", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHitRate)
            Me.columnTotalMarks = New System.Data.DataColumn("TotalMarks", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalMarks)
            Me.columnStartingTime = New System.Data.DataColumn("StartingTime", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartingTime)
            Me.columnEndingTime = New System.Data.DataColumn("EndingTime", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndingTime)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewExamRecordRow() As ExamRecordRow
            Return CType(Me.NewRow,ExamRecordRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ExamRecordRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ExamRecordRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ExamRecordRowChangedEvent) Is Nothing) Then
                RaiseEvent ExamRecordRowChanged(Me, New ExamRecordRowChangeEvent(CType(e.Row,ExamRecordRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ExamRecordRowChangingEvent) Is Nothing) Then
                RaiseEvent ExamRecordRowChanging(Me, New ExamRecordRowChangeEvent(CType(e.Row,ExamRecordRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ExamRecordRowDeletedEvent) Is Nothing) Then
                RaiseEvent ExamRecordRowDeleted(Me, New ExamRecordRowChangeEvent(CType(e.Row,ExamRecordRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ExamRecordRowDeletingEvent) Is Nothing) Then
                RaiseEvent ExamRecordRowDeleting(Me, New ExamRecordRowChangeEvent(CType(e.Row,ExamRecordRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveExamRecordRow(ByVal row As ExamRecordRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ExamRecordDataSet = New ExamRecordDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ExamRecordDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ExamRecordRow
        Inherits System.Data.DataRow
        
        Private tableExamRecord As ExamRecordDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableExamRecord = CType(Me.Table,ExamRecordDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RollNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.RollNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'RollNo' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.RollNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentId() As String
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.StudentIdColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'StudentId' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.StudentIdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudenName() As String
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.StudenNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'StudenName' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.StudenNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SectionsAttended() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.SectionsAttendedColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SectionsAttended' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.SectionsAttendedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QuestionsAttended() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.QuestionsAttendedColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'QuestionsAttended' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.QuestionsAttendedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CorrectAnswer() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.CorrectAnswerColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CorrectAnswer' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.CorrectAnswerColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WrongAnswers() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.WrongAnswersColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'WrongAnswers' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.WrongAnswersColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HitRate() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.HitRateColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'HitRate' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.HitRateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalMarks() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.TotalMarksColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TotalMarks' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.TotalMarksColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartingTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.StartingTimeColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'StartingTime' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.StartingTimeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndingTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamRecord.EndingTimeColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'EndingTime' in table 'ExamRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamRecord.EndingTimeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRollNoNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.RollNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRollNoNull()
            Me(Me.tableExamRecord.RollNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentIdNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.StudentIdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentIdNull()
            Me(Me.tableExamRecord.StudentIdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudenNameNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.StudenNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudenNameNull()
            Me(Me.tableExamRecord.StudenNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionsAttendedNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.SectionsAttendedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionsAttendedNull()
            Me(Me.tableExamRecord.SectionsAttendedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuestionsAttendedNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.QuestionsAttendedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuestionsAttendedNull()
            Me(Me.tableExamRecord.QuestionsAttendedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCorrectAnswerNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.CorrectAnswerColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCorrectAnswerNull()
            Me(Me.tableExamRecord.CorrectAnswerColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWrongAnswersNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.WrongAnswersColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWrongAnswersNull()
            Me(Me.tableExamRecord.WrongAnswersColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHitRateNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.HitRateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHitRateNull()
            Me(Me.tableExamRecord.HitRateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalMarksNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.TotalMarksColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalMarksNull()
            Me(Me.tableExamRecord.TotalMarksColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartingTimeNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.StartingTimeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartingTimeNull()
            Me(Me.tableExamRecord.StartingTimeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndingTimeNull() As Boolean
            Return Me.IsNull(Me.tableExamRecord.EndingTimeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndingTimeNull()
            Me(Me.tableExamRecord.EndingTimeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ExamRecordRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ExamRecordRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ExamRecordRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ExamRecordRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
